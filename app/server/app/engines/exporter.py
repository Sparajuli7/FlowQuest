"""
Exporter Engine - HTML→PDF (Playwright), ICS (icalendar), MD, CSV generation.
Computes sha256 for ShotGraph and artifacts, emits Outcome Receipt.
"""

import structlog
from typing import Dict, Any, List, Optional
import hashlib
import json
from datetime import datetime, timedelta
import asyncio

logger = structlog.get_logger()

class ExporterEngine:
    """
    Exporter engine that generates artifacts in multiple formats.
    """
    
    def __init__(self):
        self.supported_formats = ['pdf', 'ics', 'md', 'csv']
    
    async def export_quest(
        self,
        quest_id: str,
        formats: List[str],
        include_receipt: bool = True
    ) -> Dict[str, Any]:
        """
        Export quest to requested formats.
        """
        logger.info("Exporting quest", quest_id=quest_id, formats=formats)
        
        # Validate formats
        invalid_formats = [f for f in formats if f not in self.supported_formats]
        if invalid_formats:
            raise ValueError(f"Unsupported formats: {invalid_formats}")
        
        # Mock quest data
        quest_data = {
            "template": "sales_quote_v1@1.0.0",
            "company": "Acme Corp",
            "budget": 15000,
            "scope": "Cloud infrastructure modernization",
            "timeline": "2024-Q2",
            "deliverables": [
                "Situation: Legacy system performance issues",
                "Task: Migrate to cloud infrastructure",
                "Action: Deploy AWS/Azure solution with monitoring",
                "Result: 50% performance improvement, 99.9% uptime"
            ]
        }
        
        artifacts = {}
        
        # Generate requested formats
        if 'pdf' in formats:
            artifacts['pdf'] = await self._generate_pdf(quest_data, quest_id)
        
        if 'ics' in formats:
            artifacts['ics'] = await self._generate_ics(quest_data, quest_id)
        
        if 'md' in formats:
            artifacts['md'] = await self._generate_markdown(quest_data, quest_id)
        
        if 'csv' in formats:
            artifacts['csv'] = await self._generate_csv(quest_data, quest_id)
        
        # Generate outcome receipt
        receipt = None
        if include_receipt:
            receipt = await self._generate_receipt(quest_data, quest_id, artifacts)
        
        logger.info("Export complete", quest_id=quest_id, artifacts=list(artifacts.keys()))
        
        return {
            "artifacts": artifacts,
            "receipt": receipt
        }
    
    async def _generate_pdf(self, data: Dict[str, Any], quest_id: str) -> str:
        """Generate PDF using Playwright (HTML→PDF)."""
        logger.info("Generating PDF", quest_id=quest_id)
        
        # Mock PDF generation
        await asyncio.sleep(1.5)  # Simulate PDF generation time
        
        pdf_url = f"https://cdn.flowquest.dev/exports/{quest_id}/quote.pdf"
        return pdf_url
    
    async def _generate_ics(self, data: Dict[str, Any], quest_id: str) -> str:
        """Generate ICS calendar file."""
        logger.info("Generating ICS", quest_id=quest_id)
        
        # Mock ICS generation with icalendar library
        await asyncio.sleep(0.3)
        
        ics_url = f"https://cdn.flowquest.dev/exports/{quest_id}/timeline.ics"
        return ics_url
    
    async def _generate_markdown(self, data: Dict[str, Any], quest_id: str) -> str:
        """Generate Markdown summary."""
        logger.info("Generating Markdown", quest_id=quest_id)
        
        # Create markdown content
        markdown_content = f"""# Sales Quote - {data['company']}

## Project Overview
- **Budget**: ${data['budget']:,}
- **Timeline**: {data['timeline']}
- **Scope**: {data['scope']}

## Deliverables

{chr(10).join(f'- {item}' for item in data.get('deliverables', []))}

## Next Steps
1. Review and approve proposal
2. Execute contract
3. Begin implementation

---
*Generated by FlowQuest on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        await asyncio.sleep(0.1)  # Simulate file generation
        
        md_url = f"https://cdn.flowquest.dev/exports/{quest_id}/summary.md"
        return md_url
    
    async def _generate_csv(self, data: Dict[str, Any], quest_id: str) -> str:
        """Generate CSV data export."""
        logger.info("Generating CSV", quest_id=quest_id)
        
        # Mock CSV generation
        await asyncio.sleep(0.2)
        
        csv_url = f"https://cdn.flowquest.dev/exports/{quest_id}/data.csv"
        return csv_url
    
    async def _generate_receipt(
        self, 
        data: Dict[str, Any], 
        quest_id: str, 
        artifacts: Dict[str, str]
    ) -> Dict[str, Any]:
        """Generate outcome receipt with hashes."""
        logger.info("Generating outcome receipt", quest_id=quest_id)
        
        # Mock shot graph for hash computation
        shot_graph = {
            "version": "1.0",
            "shots": [
                {
                    "id": "s1",
                    "step_ids": ["budget"],
                    "seed": 12345,
                    "bindings": {"company": data["company"]},
                    "duration": 8.0,
                    "overlays": [{"type": "title", "text": "Sales Quote"}]
                }
            ],
            "edges": []
        }
        
        # Compute shot graph hash
        shotgraph_json = json.dumps(shot_graph, sort_keys=True, separators=(',', ':'))
        shotgraph_hash = hashlib.sha256(shotgraph_json.encode()).hexdigest()
        
        receipt = {
            "quest_id": quest_id,
            "template": data["template"],
            "shotgraph_hash": shotgraph_hash,
            "steps_taken": [
                {"id": "budget", "value": data["budget"]},
                {"id": "scope", "value": data["scope"]},
                {"id": "timeline", "value": data["timeline"]}
            ],
            "checks": [
                "Budget within scope",
                "Timeline specified", 
                "Required fields complete",
                "STAR format validated"
            ],
            "artifacts": artifacts,
            "versions": {
                "planner": "1.0.0",
                "renderer": "1.0.0", 
                "exporter": "1.0.0",
                "template": "sales_quote_v1@1.0.0"
            },
            "timestamp": datetime.now().isoformat()
        }
        
        return receipt
