import asyncio
from playwright.async_api import async_playwright
import boto3
from ics import Calendar, Event
from datetime import datetime
import os
import csv
import io
from typing import Dict, Any
import structlog

from app.core.config import settings

logger = structlog.get_logger()

class RealExporter:
    def __init__(self):
        self.s3_client = boto3.client(
            's3',
            endpoint_url=settings.S3_ENDPOINT,
            aws_access_key_id=settings.S3_ACCESS_KEY,
            aws_secret_access_key=settings.S3_SECRET_KEY
        )
        self.bucket = settings.S3_BUCKET
    
    async def generate_pdf(self, quest_data: dict, quest_id: str) -> str:
        """Generate actual PDF using Playwright"""
        logger.info("Generating PDF with Playwright", quest_id=quest_id)
        
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ 
                    font-family: 'Inter', Arial, sans-serif; 
                    padding: 40px; 
                    line-height: 1.6;
                    color: #333;
                }}
                h1 {{ 
                    color: #7EA6FF; 
                    font-size: 32px;
                    margin-bottom: 20px;
                }}
                .budget {{ 
                    font-size: 24px; 
                    font-weight: bold; 
                    color: #21D4FD;
                    margin: 20px 0;
                }}
                .section {{
                    margin: 30px 0;
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 8px;
                }}
                .deliverables {{
                    list-style: none;
                    padding: 0;
                }}
                .deliverables li {{
                    padding: 8px 0;
                    border-bottom: 1px solid #eee;
                }}
                .footer {{
                    margin-top: 40px;
                    padding-top: 20px;
                    border-top: 2px solid #7EA6FF;
                    font-size: 12px;
                    color: #666;
                }}
            </style>
        </head>
        <body>
            <h1>Sales Quote - {quest_data.get('company', 'Client')}</h1>
            <div class="budget">Budget: ${quest_data.get('budget', 0):,}</div>
            
            <div class="section">
                <h2>Project Details</h2>
                <p><strong>Timeline:</strong> {quest_data.get('timeline', 'TBD')}</p>
                <p><strong>Scope:</strong> {quest_data.get('scope', 'Project implementation')}</p>
            </div>
            
            <div class="section">
                <h2>Deliverables</h2>
                <ul class="deliverables">
                    {''.join(f'<li>{item}</li>' for item in quest_data.get('deliverables', []))}
                </ul>
            </div>
            
            <div class="footer">
                Generated by FlowQuest on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            </div>
        </body>
        </html>
        """
        
        async with async_playwright() as p:
            browser = await p.chromium.launch()
            page = await browser.new_page()
            await page.set_content(html_content)
            
            pdf_path = f"/tmp/{quest_id}_quote.pdf"
            await page.pdf(
                path=pdf_path, 
                format='A4',
                print_background=True,
                margin={'top': '20px', 'right': '20px', 'bottom': '20px', 'left': '20px'}
            )
            await browser.close()
        
        # Upload to S3
        with open(pdf_path, 'rb') as f:
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=f"exports/{quest_id}/quote.pdf",
                Body=f,
                ContentType='application/pdf'
            )
        
        # Clean up local file
        os.remove(pdf_path)
        
        pdf_url = f"{settings.S3_ENDPOINT}/{self.bucket}/exports/{quest_id}/quote.pdf"
        logger.info("PDF generated and uploaded", quest_id=quest_id, url=pdf_url)
        return pdf_url
    
    async def generate_ics(self, quest_data: dict, quest_id: str) -> str:
        """Generate actual ICS calendar file"""
        logger.info("Generating ICS calendar", quest_id=quest_id)
        
        cal = Calendar()
        
        # Main project kickoff event
        kickoff_event = Event()
        kickoff_event.name = f"Project Kickoff - {quest_data.get('company', 'Client')}"
        kickoff_event.begin = datetime.now()
        kickoff_event.duration = {'hours': 2}
        kickoff_event.description = f"Budget: ${quest_data.get('budget', 0):,}\nScope: {quest_data.get('scope', 'Project implementation')}"
        kickoff_event.location = "Virtual Meeting"
        cal.events.add(kickoff_event)
        
        # Timeline milestone events
        if quest_data.get('timeline'):
            milestone_event = Event()
            milestone_event.name = f"Project Milestone - {quest_data.get('company', 'Client')}"
            milestone_event.begin = datetime.now().replace(day=15)  # Mid-month milestone
            milestone_event.duration = {'hours': 1}
            milestone_event.description = f"Progress review for {quest_data.get('scope', 'project')}"
            cal.events.add(milestone_event)
        
        ics_path = f"/tmp/{quest_id}_timeline.ics"
        with open(ics_path, 'w') as f:
            f.writelines(cal)
        
        # Upload to S3
        with open(ics_path, 'rb') as f:
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=f"exports/{quest_id}/timeline.ics",
                Body=f,
                ContentType='text/calendar'
            )
        
        # Clean up local file
        os.remove(ics_path)
        
        ics_url = f"{settings.S3_ENDPOINT}/{self.bucket}/exports/{quest_id}/timeline.ics"
        logger.info("ICS calendar generated and uploaded", quest_id=quest_id, url=ics_url)
        return ics_url
    
    async def generate_markdown(self, quest_data: dict, quest_id: str) -> str:
        """Generate actual Markdown file"""
        logger.info("Generating Markdown file", quest_id=quest_id)
        
        markdown_content = f"""# Sales Quote - {quest_data.get('company', 'Client')}

## Project Overview
- **Budget**: ${quest_data.get('budget', 0):,}
- **Timeline**: {quest_data.get('timeline', 'TBD')}
- **Scope**: {quest_data.get('scope', 'Project implementation')}

## Deliverables

{chr(10).join(f'- {item}' for item in quest_data.get('deliverables', []))}

## Next Steps
1. Review and approve proposal
2. Execute contract
3. Begin implementation

## Contact Information
- **Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Quest ID**: {quest_id}

---
*Generated by FlowQuest*
"""
        
        md_path = f"/tmp/{quest_id}_summary.md"
        with open(md_path, 'w') as f:
            f.write(markdown_content)
        
        # Upload to S3
        with open(md_path, 'rb') as f:
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=f"exports/{quest_id}/summary.md",
                Body=f,
                ContentType='text/markdown'
            )
        
        # Clean up local file
        os.remove(md_path)
        
        md_url = f"{settings.S3_ENDPOINT}/{self.bucket}/exports/{quest_id}/summary.md"
        logger.info("Markdown file generated and uploaded", quest_id=quest_id, url=md_url)
        return md_url
    
    async def generate_csv(self, quest_data: dict, quest_id: str) -> str:
        """Generate actual CSV data export"""
        logger.info("Generating CSV file", quest_id=quest_id)
        
        # Create CSV content
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Write headers
        writer.writerow(['Field', 'Value', 'Type'])
        
        # Write data rows
        writer.writerow(['Company', quest_data.get('company', ''), 'text'])
        writer.writerow(['Budget', quest_data.get('budget', 0), 'currency'])
        writer.writerow(['Timeline', quest_data.get('timeline', ''), 'date'])
        writer.writerow(['Scope', quest_data.get('scope', ''), 'text'])
        writer.writerow(['Template', quest_data.get('template', ''), 'text'])
        writer.writerow(['Generated', datetime.now().isoformat(), 'datetime'])
        
        # Add deliverables as separate rows
        for i, deliverable in enumerate(quest_data.get('deliverables', [])):
            writer.writerow([f'Deliverable_{i+1}', deliverable, 'text'])
        
        csv_content = output.getvalue()
        output.close()
        
        csv_path = f"/tmp/{quest_id}_data.csv"
        with open(csv_path, 'w') as f:
            f.write(csv_content)
        
        # Upload to S3
        with open(csv_path, 'rb') as f:
            self.s3_client.put_object(
                Bucket=self.bucket,
                Key=f"exports/{quest_id}/data.csv",
                Body=f,
                ContentType='text/csv'
            )
        
        # Clean up local file
        os.remove(csv_path)
        
        csv_url = f"{settings.S3_ENDPOINT}/{self.bucket}/exports/{quest_id}/data.csv"
        logger.info("CSV file generated and uploaded", quest_id=quest_id, url=csv_url)
        return csv_url
